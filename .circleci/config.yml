version: 2.1
orbs:
  gcp-gke: circleci/gcp-gke@1.1.0

workflows:
  main:
    jobs:
      - build
      - deploy:
          requires:
            - build

jobs:
  build:
    docker:
      - image: circleci/golang:1.12
    #working_directory: /go/src/github.com/avian-digital-forensics/timeline-investigator
    environment:
      GCP_KEY_FILE: /tmp/gcloud-api-key.json
      GCR_CI_REG: https://eu.gcr.io
      CONTAINER_IMAGE_STAGING: eu.gcr.io/timeline-investigator/ti-api:staging
      TEST_URL: http://localhost:8080/api/
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build image and test environment
          command: cd .local && docker-compose build

      - run:
          name: Run tests
          command: cd .local && docker-compose run ti-test

      - run: 
          name: Tag and push image
          command: | 
            echo `echo ${GCLOUD_API_KEY} | base64 -d` > ${GCP_KEY_FILE}
            docker login -u _json_key -p "$(cat ${GCP_KEY_FILE})" ${GCR_CI_REG}
            docker tag timeline-investigator:local ${CONTAINER_IMAGE_STAGING}-${CIRCLE_SHA1}
            docker tag ${CONTAINER_IMAGE_STAGING}-${CIRCLE_SHA1} ${CONTAINER_IMAGE_STAGING}-latest
            docker push ${CONTAINER_IMAGE_STAGING}-${CIRCLE_SHA1}
            docker push ${CONTAINER_IMAGE_STAGING}-latest

  deploy:
    executor: gcp-gke/default
    environment:
      #GCLOUD_SERVICE_KEY: ${GCLOUD_SERVICE_KEY}
      GOOGLE_PROJECT_ID: timeline-investigator
      GOOGLE_COMPUTE_ZONE: europe-north-1a
    steps:
      - setup_remote_docker
      - checkout
      - gcp-gke/update-kubeconfig-with-credentials:
          #cluster: cluster-1
          #perform-login: true
          install-kubectl: true
      - run:
          name: Deploy to GKE
          command: |
            echo `echo ${GCLOUD_API_KEY} | base64 -d` > ${GCLOUD_SERVICE_KEY}
            echo Tag ${CIRCLE_TAG}
            echo Tag ${CIRCLE_SHA1}
            kubectl set image deployment/ti-api -n staging ti-api=${CONTAINER_IMAGE}-${CIRCLE_SHA1}