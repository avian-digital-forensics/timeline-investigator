// Code generated by oto; DO NOT EDIT.

package api

import (
	"github.com/pacedotdev/oto/otohttp"
)

// Service is the main-service
type Service interface {
	// Greet sends a polite greeting
	Greet(context.Context, GreetRequest) (*GreetResponse, error)
}

type serviceServer struct {
	server  *otohttp.Server
	service Service
	test    bool
}

// Register adds the Service to the otohttp.Server.
func RegisterService(server *otohttp.Server, service Service) {
	handler := &serviceServer{
		server:  server,
		service: service,
	}
	server.Register("Service", "Greet", handler.handleGreet)
}

func (s *serviceServer) handleGreet(w http.ResponseWriter, r *http.Request) {
	var request GreetRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	ctx, err := s.service.Authenticate(r.Context(), r, request.Secret)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.service.Greet(ctx, request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// GreetRequest is the request object for GreeterService.Greet.
type GreetRequest struct {
	// Namee of the person to greet
	Name string `json:"name"`
}

// GreetResponse is the response object containing a person's greeting.
type GreetResponse struct {
	// Greeting is a nice message welcoming somebody.
	Greeting string `json:"greeting"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
